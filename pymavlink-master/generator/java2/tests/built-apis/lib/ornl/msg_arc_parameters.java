/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ARC_PARAMETERS PACKING
package com.mavlink.ornl;
import com.mavlink.MAVLinkPacket;
import com.mavlink.Messages.MAVLinkMessage;
import com.mavlink.Messages.MAVLinkPayload;
        
/**
* This command is being deprecated in favor of ARC_PARAMETER w/Enumerations
*/
public class msg_arc_parameters extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_ARC_PARAMETERS = 239;
    public static final int MAVLINK_MSG_LENGTH = 42;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ARC_PARAMETERS;


      
    /**
    * The command state sequence number against which this parameter set should apply.
    */
    public long command_sequence;
      
    /**
    * Rally point 1 Latitude (WGS84), in degrees * 1E7, 0 if unused
    */
    public int rally_point_1_latitude;
      
    /**
    * Rally point 1 Longitude (WGS84, in degrees * 1E7, 0 if unused
    */
    public int rally_point_1_longitude;
      
    /**
    * Rally point 2 Latitude (WGS84), in degrees * 1E7, 0 if unused
    */
    public int rally_point_2_latitude;
      
    /**
    * Rally point 2 Longitude (WGS84, in degrees * 1E7, 0 if unused
    */
    public int rally_point_2_longitude;
      
    /**
    * Battery failsafe voltage in millivolts 0-65535
    */
    public int fs_batt_voltage;
      
    /**
    * Altitude of the geofence in meters (10-1000)
    */
    public int fence_alt_max;
      
    /**
    * Radius of the geofence in meters (30-10000)
    */
    public int fence_radius;
      
    /**
    * RTL altitude in centimeters (0-8000)
    */
    public int rtl_alt;
      
    /**
    * Vehicle speed in auto and guided modes in cm/s (20-2000)
    */
    public int wpnav_speed;
      
    /**
    * Altitude of the arcsoft rangefinder failsafe in meters (1-200)
    */
    public int fs_arc_rangefinder_alt;
      
    /**
    * Rally point 1 Altitude above home level, in meters, 0 if unused
    */
    public short rally_point_1_ahl;
      
    /**
    * Rally point 2 Altitude above home level, in meters, 0 if unused
    */
    public short rally_point_2_ahl;
      
    /**
    * System which should receive the parameters. 0 if broadcast.
    */
    public short target_system;
      
    /**
    * Enable (1) or disable (0) the battery failsafe
    */
    public short fs_batt_enable;
      
    /**
    * Enable (1) or disable (0) the geofence
    */
    public short fence_enable;
      
    /**
    * Enable (1) or disable (0) the hand radio failsafe
    */
    public short fs_thr_enable;
      
    /**
    * Failsafe behavior at EKF failsafe (gps, compass or other sensor failure). 1 = Land, 2 = AltHold, 3 = Land even in Stabilize
    */
    public short fs_ekf_action;
      
    /**
    * Enable (1) or disable (0) the arcsoft rangefinder failsafe .If turned on, then the vehicle will enter brake mode if altitude is less than the specified altitude and the vehicle is in GUIDED mode. 
    */
    public short fs_arc_rangefinder;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_ARC_PARAMETERS;
              
        packet.payload.putUnsignedInt(command_sequence);
              
        packet.payload.putInt(rally_point_1_latitude);
              
        packet.payload.putInt(rally_point_1_longitude);
              
        packet.payload.putInt(rally_point_2_latitude);
              
        packet.payload.putInt(rally_point_2_longitude);
              
        packet.payload.putUnsignedShort(fs_batt_voltage);
              
        packet.payload.putUnsignedShort(fence_alt_max);
              
        packet.payload.putUnsignedShort(fence_radius);
              
        packet.payload.putUnsignedShort(rtl_alt);
              
        packet.payload.putUnsignedShort(wpnav_speed);
              
        packet.payload.putUnsignedShort(fs_arc_rangefinder_alt);
              
        packet.payload.putShort(rally_point_1_ahl);
              
        packet.payload.putShort(rally_point_2_ahl);
              
        packet.payload.putUnsignedByte(target_system);
              
        packet.payload.putUnsignedByte(fs_batt_enable);
              
        packet.payload.putUnsignedByte(fence_enable);
              
        packet.payload.putUnsignedByte(fs_thr_enable);
              
        packet.payload.putUnsignedByte(fs_ekf_action);
              
        packet.payload.putUnsignedByte(fs_arc_rangefinder);
        
        return packet;
    }

    /**
    * Decode a arc_parameters message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.command_sequence = payload.getUnsignedInt();
              
        this.rally_point_1_latitude = payload.getInt();
              
        this.rally_point_1_longitude = payload.getInt();
              
        this.rally_point_2_latitude = payload.getInt();
              
        this.rally_point_2_longitude = payload.getInt();
              
        this.fs_batt_voltage = payload.getUnsignedShort();
              
        this.fence_alt_max = payload.getUnsignedShort();
              
        this.fence_radius = payload.getUnsignedShort();
              
        this.rtl_alt = payload.getUnsignedShort();
              
        this.wpnav_speed = payload.getUnsignedShort();
              
        this.fs_arc_rangefinder_alt = payload.getUnsignedShort();
              
        this.rally_point_1_ahl = payload.getShort();
              
        this.rally_point_2_ahl = payload.getShort();
              
        this.target_system = payload.getUnsignedByte();
              
        this.fs_batt_enable = payload.getUnsignedByte();
              
        this.fence_enable = payload.getUnsignedByte();
              
        this.fs_thr_enable = payload.getUnsignedByte();
              
        this.fs_ekf_action = payload.getUnsignedByte();
              
        this.fs_arc_rangefinder = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_arc_parameters(){
        msgid = MAVLINK_MSG_ID_ARC_PARAMETERS;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_arc_parameters(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_ARC_PARAMETERS;
        unpack(mavLinkPacket.payload);        
    }

                                          
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_ARC_PARAMETERS -"+" command_sequence:"+command_sequence+" rally_point_1_latitude:"+rally_point_1_latitude+" rally_point_1_longitude:"+rally_point_1_longitude+" rally_point_2_latitude:"+rally_point_2_latitude+" rally_point_2_longitude:"+rally_point_2_longitude+" fs_batt_voltage:"+fs_batt_voltage+" fence_alt_max:"+fence_alt_max+" fence_radius:"+fence_radius+" rtl_alt:"+rtl_alt+" wpnav_speed:"+wpnav_speed+" fs_arc_rangefinder_alt:"+fs_arc_rangefinder_alt+" rally_point_1_ahl:"+rally_point_1_ahl+" rally_point_2_ahl:"+rally_point_2_ahl+" target_system:"+target_system+" fs_batt_enable:"+fs_batt_enable+" fence_enable:"+fence_enable+" fs_thr_enable:"+fs_thr_enable+" fs_ekf_action:"+fs_ekf_action+" fs_arc_rangefinder:"+fs_arc_rangefinder+"";
    }
}
        