/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ARC_MESSAGE PACKING
package com.mavlink.ornl;
import com.mavlink.MAVLinkPacket;
import com.mavlink.Messages.MAVLinkMessage;
import com.mavlink.Messages.MAVLinkPayload;
        
/**
* Used for sending important system messages between assets and GCSs.
*/
public class msg_arc_message extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_ARC_MESSAGE = 235;
    public static final int MAVLINK_MSG_LENGTH = 59;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ARC_MESSAGE;


    /**
    * Timestamp (microseconds since UNIX epoch based on GPS)
    */
    public long time_usec;
      
    /**
    * Severity of message. See enum MAV_SEVERITY.
    */
    public short severity;
      
    /**
    * ASCII encoded system message
    */
    public byte text[] = new byte[50];
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_ARC_MESSAGE;
              
        packet.payload.putUnsignedLong(time_usec);
              
        packet.payload.putUnsignedByte(severity);
              
        
        for (int i = 0; i < text.length; i++) {
            packet.payload.putByte(text[i]);
        }
                    
        
        return packet;
    }

    /**
    * Decode a arc_message message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.time_usec = payload.getUnsignedLong();
              
        this.severity = payload.getUnsignedByte();
              
         
        for (int i = 0; i < this.text.length; i++) {
            this.text[i] = payload.getByte();
        }
                
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_arc_message(){
        msgid = MAVLINK_MSG_ID_ARC_MESSAGE;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_arc_message(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_ARC_MESSAGE;
        unpack(mavLinkPacket.payload);        
    }

         
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setText(String str) {
        int len = Math.min(str.length(), 50);
        for (int i=0; i<len; i++) {
            text[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<50; i++) {            // padding for the rest of the buffer
            text[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getText() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 50; i++) {
            if (text[i] != 0)
                buf.append((char) text[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_ARC_MESSAGE -"+" time_usec:"+time_usec+" severity:"+severity+" text:"+text+"";
    }
}
        