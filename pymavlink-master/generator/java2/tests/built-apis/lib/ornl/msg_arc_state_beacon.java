/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ARC_STATE_BEACON PACKING
package com.mavlink.ornl;
import com.mavlink.MAVLinkPacket;
import com.mavlink.Messages.MAVLinkMessage;
import com.mavlink.Messages.MAVLinkPayload;
        
/**
* Data from a beacon device, typically a cellphone running UVDL tracking software.
*/
public class msg_arc_state_beacon extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_ARC_STATE_BEACON = 225;
    public static final int MAVLINK_MSG_LENGTH = 38;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ARC_STATE_BEACON;


      
    /**
    * Incrementing sequence number, device is expected to increment with each msg and not repeat even with reboot
    */
    public long state_sequence;
      
    /**
    * Timestamp (microseconds since UNIX epoch based on GPS)
    */
    public long time_usec;
      
    /**
    * Provides information on the current executing command on the device
    */
    public long command_sequence;
      
    /**
    * Latitude, expressed as degrees * 1E7
    */
    public int latitude;
      
    /**
    * Longitude, expressed as degrees * 1E7
    */
    public int longitude;
      
    /**
    * Altitude above mean sea level, in meters * 1000 (positive for up)
    */
    public int altitude_amsl;
      
    /**
    * Type of the MAV defined in MAV_TYPE ENUM, Added so this message can be used standalone in LB environments
    */
    public short system_type;
      
    /**
    * System id of the device to which we wish to subscribe. (0: none, 255: all)
    */
    public short subscription;
      
    /**
    * The interface transmitting this message
    */
    public byte transmit_interface;
      
    /**
    * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
    */
    public byte los_rssi;
      
    /**
    * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
    */
    public byte cellular_rssi;
      
    /**
    * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
    */
    public byte satellite_rssi;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_ARC_STATE_BEACON;
              
        packet.payload.putLong(state_sequence);
              
        packet.payload.putUnsignedLong(time_usec);
              
        packet.payload.putUnsignedInt(command_sequence);
              
        packet.payload.putInt(latitude);
              
        packet.payload.putInt(longitude);
              
        packet.payload.putInt(altitude_amsl);
              
        packet.payload.putUnsignedByte(system_type);
              
        packet.payload.putUnsignedByte(subscription);
              
        packet.payload.putByte(transmit_interface);
              
        packet.payload.putByte(los_rssi);
              
        packet.payload.putByte(cellular_rssi);
              
        packet.payload.putByte(satellite_rssi);
        
        return packet;
    }

    /**
    * Decode a arc_state_beacon message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.state_sequence = payload.getLong();
              
        this.time_usec = payload.getUnsignedLong();
              
        this.command_sequence = payload.getUnsignedInt();
              
        this.latitude = payload.getInt();
              
        this.longitude = payload.getInt();
              
        this.altitude_amsl = payload.getInt();
              
        this.system_type = payload.getUnsignedByte();
              
        this.subscription = payload.getUnsignedByte();
              
        this.transmit_interface = payload.getByte();
              
        this.los_rssi = payload.getByte();
              
        this.cellular_rssi = payload.getByte();
              
        this.satellite_rssi = payload.getByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_arc_state_beacon(){
        msgid = MAVLINK_MSG_ID_ARC_STATE_BEACON;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_arc_state_beacon(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_ARC_STATE_BEACON;
        unpack(mavLinkPacket.payload);        
    }

                            
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_ARC_STATE_BEACON -"+" state_sequence:"+state_sequence+" time_usec:"+time_usec+" command_sequence:"+command_sequence+" latitude:"+latitude+" longitude:"+longitude+" altitude_amsl:"+altitude_amsl+" system_type:"+system_type+" subscription:"+subscription+" transmit_interface:"+transmit_interface+" los_rssi:"+los_rssi+" cellular_rssi:"+cellular_rssi+" satellite_rssi:"+satellite_rssi+"";
    }
}
        