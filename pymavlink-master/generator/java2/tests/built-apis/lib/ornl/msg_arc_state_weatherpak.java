/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ARC_STATE_WEATHERPAK PACKING
package com.mavlink.ornl;
import com.mavlink.MAVLinkPacket;
import com.mavlink.Messages.MAVLinkMessage;
import com.mavlink.Messages.MAVLinkPayload;
        
/**
* Data from the ORNL WEATHER station interface.
*/
public class msg_arc_state_weatherpak extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_ARC_STATE_WEATHERPAK = 229;
    public static final int MAVLINK_MSG_LENGTH = 86;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ARC_STATE_WEATHERPAK;


      
    /**
    * Incrementing sequence number, device is expected to increment with each msg and not repeat even with reboot
    */
    public long state_sequence;
      
    /**
    * Timestamp (microseconds since UNIX epoch based on GPS)
    */
    public long time_usec;
      
    /**
    * Provides information on the current executing command on the device
    */
    public long command_sequence;
      
    /**
    * Latitude, expressed as degrees * 1E7
    */
    public int latitude;
      
    /**
    * Longitude, expressed as degrees * 1E7
    */
    public int longitude;
      
    /**
    * Altitude above mean sea level, in meters * 1000 (positive for up)
    */
    public int altitude_amsl;
      
    /**
    * The interval between each ARC_STATE_WEATHERPAK message, in microseconds.
    */
    public int interval;
      
    /**
    * The delay between the last integration and the next, in microseconds.
    */
    public int offset;
      
    /**
    * The amount of time to integrate sensor data, in microseconds.
    */
    public int duration;
      
    /**
    * The weather sensor unit serial number
    */
    public long serial_number;
      
    /**
    * Integrated wind speed in (m/s)
    */
    public float wind_speed;
      
    /**
    * Integrated wind direction (degrees)
    */
    public float wind_direction;
      
    /**
    * Wind standard deviation
    */
    public float wind_std_dev;
      
    /**
    * Current orientation in degrees, in compass units (0..360, 0=north)
    */
    public float magnet_heading;
      
    /**
    * Barometric pressure (hectopascal)
    */
    public float press_abs;
      
    /**
    * Relative humidity (percent)
    */
    public float relative_humidity;
      
    /**
    * Battery voltage, in millivolts (1 = 1 millivolt, 0: no information)
    */
    public int voltage_battery;
      
    /**
    * Integrated/average temperature measurement (0.01 degrees celsius)
    */
    public short temperature;
      
    /**
    * Type of the MAV defined in MAV_TYPE ENUM, Added so this message can be used standalone in LB environments
    */
    public short system_type;
      
    /**
    * System id of the device to which we wish to subscribe. (0: none, 255: all)
    */
    public short subscription;
      
    /**
    * The interface transmitting this message
    */
    public byte transmit_interface;
      
    /**
    * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
    */
    public byte los_rssi;
      
    /**
    * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
    */
    public byte cellular_rssi;
      
    /**
    * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
    */
    public byte satellite_rssi;
      
    /**
    * Remaining battery energy: (0%: 0, 100%: 100), -1: no estimate
    */
    public byte battery_remaining;
      
    /**
    * See the GPS_FIX_TYPE enum.
    */
    public short gps_fix_type;
      
    /**
    * Number of satellites visible. If unknown, set to 255
    */
    public short gps_satellites_visible;
      
    /**
    * Current operating mode of the system based on SWITCH_MODE enum
    */
    public short system_mode;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_ARC_STATE_WEATHERPAK;
              
        packet.payload.putLong(state_sequence);
              
        packet.payload.putUnsignedLong(time_usec);
              
        packet.payload.putUnsignedInt(command_sequence);
              
        packet.payload.putInt(latitude);
              
        packet.payload.putInt(longitude);
              
        packet.payload.putInt(altitude_amsl);
              
        packet.payload.putInt(interval);
              
        packet.payload.putInt(offset);
              
        packet.payload.putInt(duration);
              
        packet.payload.putUnsignedInt(serial_number);
              
        packet.payload.putFloat(wind_speed);
              
        packet.payload.putFloat(wind_direction);
              
        packet.payload.putFloat(wind_std_dev);
              
        packet.payload.putFloat(magnet_heading);
              
        packet.payload.putFloat(press_abs);
              
        packet.payload.putFloat(relative_humidity);
              
        packet.payload.putUnsignedShort(voltage_battery);
              
        packet.payload.putShort(temperature);
              
        packet.payload.putUnsignedByte(system_type);
              
        packet.payload.putUnsignedByte(subscription);
              
        packet.payload.putByte(transmit_interface);
              
        packet.payload.putByte(los_rssi);
              
        packet.payload.putByte(cellular_rssi);
              
        packet.payload.putByte(satellite_rssi);
              
        packet.payload.putByte(battery_remaining);
              
        packet.payload.putUnsignedByte(gps_fix_type);
              
        packet.payload.putUnsignedByte(gps_satellites_visible);
              
        packet.payload.putUnsignedByte(system_mode);
        
        return packet;
    }

    /**
    * Decode a arc_state_weatherpak message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.state_sequence = payload.getLong();
              
        this.time_usec = payload.getUnsignedLong();
              
        this.command_sequence = payload.getUnsignedInt();
              
        this.latitude = payload.getInt();
              
        this.longitude = payload.getInt();
              
        this.altitude_amsl = payload.getInt();
              
        this.interval = payload.getInt();
              
        this.offset = payload.getInt();
              
        this.duration = payload.getInt();
              
        this.serial_number = payload.getUnsignedInt();
              
        this.wind_speed = payload.getFloat();
              
        this.wind_direction = payload.getFloat();
              
        this.wind_std_dev = payload.getFloat();
              
        this.magnet_heading = payload.getFloat();
              
        this.press_abs = payload.getFloat();
              
        this.relative_humidity = payload.getFloat();
              
        this.voltage_battery = payload.getUnsignedShort();
              
        this.temperature = payload.getShort();
              
        this.system_type = payload.getUnsignedByte();
              
        this.subscription = payload.getUnsignedByte();
              
        this.transmit_interface = payload.getByte();
              
        this.los_rssi = payload.getByte();
              
        this.cellular_rssi = payload.getByte();
              
        this.satellite_rssi = payload.getByte();
              
        this.battery_remaining = payload.getByte();
              
        this.gps_fix_type = payload.getUnsignedByte();
              
        this.gps_satellites_visible = payload.getUnsignedByte();
              
        this.system_mode = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_arc_state_weatherpak(){
        msgid = MAVLINK_MSG_ID_ARC_STATE_WEATHERPAK;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_arc_state_weatherpak(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_ARC_STATE_WEATHERPAK;
        unpack(mavLinkPacket.payload);        
    }

                                                            
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_ARC_STATE_WEATHERPAK -"+" state_sequence:"+state_sequence+" time_usec:"+time_usec+" command_sequence:"+command_sequence+" latitude:"+latitude+" longitude:"+longitude+" altitude_amsl:"+altitude_amsl+" interval:"+interval+" offset:"+offset+" duration:"+duration+" serial_number:"+serial_number+" wind_speed:"+wind_speed+" wind_direction:"+wind_direction+" wind_std_dev:"+wind_std_dev+" magnet_heading:"+magnet_heading+" press_abs:"+press_abs+" relative_humidity:"+relative_humidity+" voltage_battery:"+voltage_battery+" temperature:"+temperature+" system_type:"+system_type+" subscription:"+subscription+" transmit_interface:"+transmit_interface+" los_rssi:"+los_rssi+" cellular_rssi:"+cellular_rssi+" satellite_rssi:"+satellite_rssi+" battery_remaining:"+battery_remaining+" gps_fix_type:"+gps_fix_type+" gps_satellites_visible:"+gps_satellites_visible+" system_mode:"+system_mode+"";
    }
}
        