/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE MAVNET_STATE_COPTER PACKING
package com.mavlink.mavnet;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;
        
/**
 * MAVNet state message for a *copter.
 */
public class msg_mavnet_state_copter extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_MAVNET_STATE_COPTER = 43009;
    public static final int MAVLINK_MSG_LENGTH = 226;
    private static final long serialVersionUID = MAVLINK_MSG_ID_MAVNET_STATE_COPTER;


      
    /**
     * Incrementing sequence number, device is expected to increment with each msg and not repeat even with reboot
     */
    public long state_sequence;
      
    /**
     * Timestamp (since UNIX epoch based on GPS)
     */
    public long time_usec;
      
    /**
     * Provides information on the current executing command on the device
     */
    public long command_sequence;
      
    /**
     * Latitude (WGS84)
     */
    public int destination_latitude;
      
    /**
     * Longitude (WGS84)
     */
    public int destination_longitude;
      
    /**
     * Altitude above home level (positive for up)
     */
    public int destination_altitude_ahl;
      
    /**
     * Latitude (WGS84)
     */
    public int target_latitude;
      
    /**
     * Longitude (WGS84)
     */
    public int target_longitude;
      
    /**
     * Altitude above home level (positive for up)
     */
    public int target_altitude_ahl;
      
    /**
     * Latitude (WGS84)
     */
    public int home_latitude;
      
    /**
     * Longitude (WGS84)
     */
    public int home_longitude;
      
    /**
     * Altitude above mean sea level (positive for up)
     */
    public int home_altitude_amsl;
      
    /**
     * Immediate altitude setpoint above home level (positive for up)
     */
    public int immediate_altitude_ahl;
      
    /**
     * Estimate of remaining operation time (0: no estimate, 0xFFFFFFFF: no battery)
     */
    public long estimated_run_time;
      
    /**
     * The interval between each STATE message
     */
    public int interval;
      
    /**
     * The delay between sensor integrations
     */
    public int offset;
      
    /**
     * The amount of time to integrate sensor data
     */
    public int duration;
      
    /**
     * Rally point 1 Latitude (WGS84), 0 if unused
     */
    public int rally_point_1_latitude;
      
    /**
     * Rally point 1 Longitude (WGS84), 0 if unused
     */
    public int rally_point_1_longitude;
      
    /**
     * Rally point 2 Latitude (WGS84), 0 if unused
     */
    public int rally_point_2_latitude;
      
    /**
     * Rally point 2 Longitude (WGS84), 0 if unused
     */
    public int rally_point_2_longitude;
      
    /**
     * Current delay timer in seconds (-1: Infinite delay, 0: No delay, >1 delay sec)
     */
    public int mission_delay;
      
    /**
     * A bitfield for use for autopilot-specific flags.
     */
    public long custom_mode;
      
    /**
     * Latitude
     */
    public int latitude;
      
    /**
     * Longitude
     */
    public int longitude;
      
    /**
     * Altitude above mean sea level (positive for up)
     */
    public int altitude_amsl;
      
    /**
     * Current ground speed
     */
    public float groundspeed;
      
    /**
     * Altitude above home level (positive for up)
     */
    public int altitude_ahl;
      
    /**
     * Altitude above ground level (positive for up)
     */
    public int altitude_agl;
      
    /**
     * Current airspeed
     */
    public float airspeed;
      
    /**
     * Rally point 1 Altitude above home level, 0 if unused
     */
    public short rally_point_1_ahl;
      
    /**
     * Rally point 2 Altitude above home level, 0 if unused
     */
    public short rally_point_2_ahl;
      
    /**
     * Execution point in the current mission
     */
    public int mission_sequence;
      
    /**
     * Current heading, in compass units (0..360, 0=north)
     */
    public short heading;
      
    /**
     * Battery voltage (0: no information)
     */
    public int voltage_battery;
      
    /**
     * CPU [0], Board [1] temperature (Celsius)
     */
    public short system_temperature[] = new short[16];
      
    /**
     * EKF status flags
     */
    public int ekf_status_flags;
      
    /**
     * Roll
     */
    public short roll;
      
    /**
     * Pitch
     */
    public short pitch;
      
    /**
     * Type of the system defined in MAV_TYPE ENUM
     */
    public short system_type;
      
    /**
     * System id of the device to which we wish to subscribe. (0: none, 255: all)
     */
    public short subscription;
      
    /**
     * Fly state parameter (0:false, 1: true)
     */
    public short fly;
      
    /**
     * Pause state parameter (0: false, 1: true)
     */
    public short pause;
      
    /**
     * Speed setpoint
     */
    public short speed;
      
    /**
     * Gripper state (0: Off, 1: On)
     */
    public short grip;
      
    /**
     * Asset state bitmap.
     */
    public short flags;
      
    /**
     * Hash of the currently loaded parameters (MD5 hash)
     */
    public short param_hash[] = new short[16];
      
    /**
     * ID of the currently executing mission (MD5 hash)
     */
    public short mission_id[] = new short[16];
      
    /**
     * MAVNet mission active flag (0:false, 1: true)
     */
    public short mission_active;
      
    /**
     * Status of a mission upload (-1: No upload, 0-100: percent complete)
     */
    public byte mission_upload;
      
    /**
     * The interface transmitting this message
     */
    public byte transmit_interface;
      
    /**
     * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
     */
    public byte los_rssi;
      
    /**
     * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
     */
    public byte cellular_rssi;
      
    /**
     * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
     */
    public byte satellite_rssi;
      
    /**
     * System mode bitfield, see MAV_MODE_FLAG ENUM in mavlink/include/mavlink_types.h
     */
    public short base_mode;
      
    /**
     * System status flag, see MAV_STATE ENUM
     */
    public short system_status;
      
    /**
     * See the GPS_FIX_TYPE enum.
     */
    public short gps_fix_type;
      
    /**
     * Number of satellites visible. If unknown, set to 255
     */
    public short gps_satellites_visible;
      
    /**
     * Remaining battery energy, -1: not available
     */
    public byte battery_remaining;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_MAVNET_STATE_COPTER;
        
        packet.payload.putLong(state_sequence);
        
        packet.payload.putUnsignedLong(time_usec);
        
        packet.payload.putUnsignedInt(command_sequence);
        
        packet.payload.putInt(destination_latitude);
        
        packet.payload.putInt(destination_longitude);
        
        packet.payload.putInt(destination_altitude_ahl);
        
        packet.payload.putInt(target_latitude);
        
        packet.payload.putInt(target_longitude);
        
        packet.payload.putInt(target_altitude_ahl);
        
        packet.payload.putInt(home_latitude);
        
        packet.payload.putInt(home_longitude);
        
        packet.payload.putInt(home_altitude_amsl);
        
        packet.payload.putInt(immediate_altitude_ahl);
        
        packet.payload.putUnsignedInt(estimated_run_time);
        
        packet.payload.putInt(interval);
        
        packet.payload.putInt(offset);
        
        packet.payload.putInt(duration);
        
        packet.payload.putInt(rally_point_1_latitude);
        
        packet.payload.putInt(rally_point_1_longitude);
        
        packet.payload.putInt(rally_point_2_latitude);
        
        packet.payload.putInt(rally_point_2_longitude);
        
        packet.payload.putInt(mission_delay);
        
        packet.payload.putUnsignedInt(custom_mode);
        
        packet.payload.putInt(latitude);
        
        packet.payload.putInt(longitude);
        
        packet.payload.putInt(altitude_amsl);
        
        packet.payload.putFloat(groundspeed);
        
        packet.payload.putInt(altitude_ahl);
        
        packet.payload.putInt(altitude_agl);
        
        packet.payload.putFloat(airspeed);
        
        packet.payload.putShort(rally_point_1_ahl);
        
        packet.payload.putShort(rally_point_2_ahl);
        
        packet.payload.putUnsignedShort(mission_sequence);
        
        packet.payload.putShort(heading);
        
        packet.payload.putUnsignedShort(voltage_battery);
        
        
        for (int i = 0; i < system_temperature.length; i++) {
            packet.payload.putShort(system_temperature[i]);
        }
                    
        
        packet.payload.putUnsignedShort(ekf_status_flags);
        
        packet.payload.putShort(roll);
        
        packet.payload.putShort(pitch);
        
        packet.payload.putUnsignedByte(system_type);
        
        packet.payload.putUnsignedByte(subscription);
        
        packet.payload.putUnsignedByte(fly);
        
        packet.payload.putUnsignedByte(pause);
        
        packet.payload.putUnsignedByte(speed);
        
        packet.payload.putUnsignedByte(grip);
        
        packet.payload.putUnsignedByte(flags);
        
        
        for (int i = 0; i < param_hash.length; i++) {
            packet.payload.putUnsignedByte(param_hash[i]);
        }
                    
        
        
        for (int i = 0; i < mission_id.length; i++) {
            packet.payload.putUnsignedByte(mission_id[i]);
        }
                    
        
        packet.payload.putUnsignedByte(mission_active);
        
        packet.payload.putByte(mission_upload);
        
        packet.payload.putByte(transmit_interface);
        
        packet.payload.putByte(los_rssi);
        
        packet.payload.putByte(cellular_rssi);
        
        packet.payload.putByte(satellite_rssi);
        
        packet.payload.putUnsignedByte(base_mode);
        
        packet.payload.putUnsignedByte(system_status);
        
        packet.payload.putUnsignedByte(gps_fix_type);
        
        packet.payload.putUnsignedByte(gps_satellites_visible);
        
        packet.payload.putByte(battery_remaining);
        
        if(isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a mavnet_state_copter message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.state_sequence = payload.getLong();
        
        this.time_usec = payload.getUnsignedLong();
        
        this.command_sequence = payload.getUnsignedInt();
        
        this.destination_latitude = payload.getInt();
        
        this.destination_longitude = payload.getInt();
        
        this.destination_altitude_ahl = payload.getInt();
        
        this.target_latitude = payload.getInt();
        
        this.target_longitude = payload.getInt();
        
        this.target_altitude_ahl = payload.getInt();
        
        this.home_latitude = payload.getInt();
        
        this.home_longitude = payload.getInt();
        
        this.home_altitude_amsl = payload.getInt();
        
        this.immediate_altitude_ahl = payload.getInt();
        
        this.estimated_run_time = payload.getUnsignedInt();
        
        this.interval = payload.getInt();
        
        this.offset = payload.getInt();
        
        this.duration = payload.getInt();
        
        this.rally_point_1_latitude = payload.getInt();
        
        this.rally_point_1_longitude = payload.getInt();
        
        this.rally_point_2_latitude = payload.getInt();
        
        this.rally_point_2_longitude = payload.getInt();
        
        this.mission_delay = payload.getInt();
        
        this.custom_mode = payload.getUnsignedInt();
        
        this.latitude = payload.getInt();
        
        this.longitude = payload.getInt();
        
        this.altitude_amsl = payload.getInt();
        
        this.groundspeed = payload.getFloat();
        
        this.altitude_ahl = payload.getInt();
        
        this.altitude_agl = payload.getInt();
        
        this.airspeed = payload.getFloat();
        
        this.rally_point_1_ahl = payload.getShort();
        
        this.rally_point_2_ahl = payload.getShort();
        
        this.mission_sequence = payload.getUnsignedShort();
        
        this.heading = payload.getShort();
        
        this.voltage_battery = payload.getUnsignedShort();
        
         
        for (int i = 0; i < this.system_temperature.length; i++) {
            this.system_temperature[i] = payload.getShort();
        }
                
        
        this.ekf_status_flags = payload.getUnsignedShort();
        
        this.roll = payload.getShort();
        
        this.pitch = payload.getShort();
        
        this.system_type = payload.getUnsignedByte();
        
        this.subscription = payload.getUnsignedByte();
        
        this.fly = payload.getUnsignedByte();
        
        this.pause = payload.getUnsignedByte();
        
        this.speed = payload.getUnsignedByte();
        
        this.grip = payload.getUnsignedByte();
        
        this.flags = payload.getUnsignedByte();
        
         
        for (int i = 0; i < this.param_hash.length; i++) {
            this.param_hash[i] = payload.getUnsignedByte();
        }
                
        
         
        for (int i = 0; i < this.mission_id.length; i++) {
            this.mission_id[i] = payload.getUnsignedByte();
        }
                
        
        this.mission_active = payload.getUnsignedByte();
        
        this.mission_upload = payload.getByte();
        
        this.transmit_interface = payload.getByte();
        
        this.los_rssi = payload.getByte();
        
        this.cellular_rssi = payload.getByte();
        
        this.satellite_rssi = payload.getByte();
        
        this.base_mode = payload.getUnsignedByte();
        
        this.system_status = payload.getUnsignedByte();
        
        this.gps_fix_type = payload.getUnsignedByte();
        
        this.gps_satellites_visible = payload.getUnsignedByte();
        
        this.battery_remaining = payload.getByte();
        
        if(isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_mavnet_state_copter() {
        msgid = MAVLINK_MSG_ID_MAVNET_STATE_COPTER;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_mavnet_state_copter(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_MAVNET_STATE_COPTER;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);        
    }

                                                                                                                          
    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_MAVNET_STATE_COPTER - sysid:"+sysid+" compid:"+compid+" state_sequence:"+state_sequence+" time_usec:"+time_usec+" command_sequence:"+command_sequence+" destination_latitude:"+destination_latitude+" destination_longitude:"+destination_longitude+" destination_altitude_ahl:"+destination_altitude_ahl+" target_latitude:"+target_latitude+" target_longitude:"+target_longitude+" target_altitude_ahl:"+target_altitude_ahl+" home_latitude:"+home_latitude+" home_longitude:"+home_longitude+" home_altitude_amsl:"+home_altitude_amsl+" immediate_altitude_ahl:"+immediate_altitude_ahl+" estimated_run_time:"+estimated_run_time+" interval:"+interval+" offset:"+offset+" duration:"+duration+" rally_point_1_latitude:"+rally_point_1_latitude+" rally_point_1_longitude:"+rally_point_1_longitude+" rally_point_2_latitude:"+rally_point_2_latitude+" rally_point_2_longitude:"+rally_point_2_longitude+" mission_delay:"+mission_delay+" custom_mode:"+custom_mode+" latitude:"+latitude+" longitude:"+longitude+" altitude_amsl:"+altitude_amsl+" groundspeed:"+groundspeed+" altitude_ahl:"+altitude_ahl+" altitude_agl:"+altitude_agl+" airspeed:"+airspeed+" rally_point_1_ahl:"+rally_point_1_ahl+" rally_point_2_ahl:"+rally_point_2_ahl+" mission_sequence:"+mission_sequence+" heading:"+heading+" voltage_battery:"+voltage_battery+" system_temperature:"+system_temperature+" ekf_status_flags:"+ekf_status_flags+" roll:"+roll+" pitch:"+pitch+" system_type:"+system_type+" subscription:"+subscription+" fly:"+fly+" pause:"+pause+" speed:"+speed+" grip:"+grip+" flags:"+flags+" param_hash:"+param_hash+" mission_id:"+mission_id+" mission_active:"+mission_active+" mission_upload:"+mission_upload+" transmit_interface:"+transmit_interface+" los_rssi:"+los_rssi+" cellular_rssi:"+cellular_rssi+" satellite_rssi:"+satellite_rssi+" base_mode:"+base_mode+" system_status:"+system_status+" gps_fix_type:"+gps_fix_type+" gps_satellites_visible:"+gps_satellites_visible+" battery_remaining:"+battery_remaining+"";
    }
}
        