/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE MAVNET_STATE_SWITCHBOX PACKING
package com.mavlink.mavnet;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;
        
/**
 * Data from the MAVNet Switch.
 */
public class msg_mavnet_state_switchbox extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_MAVNET_STATE_SWITCHBOX = 43014;
    public static final int MAVLINK_MSG_LENGTH = 152;
    private static final long serialVersionUID = MAVLINK_MSG_ID_MAVNET_STATE_SWITCHBOX;


      
    /**
     * Incrementing sequence number, device is expected to increment with each msg and not repeat even with reboot
     */
    public long state_sequence;
      
    /**
     * Timestamp (UNIX epoch based on GPS)
     */
    public long time_usec;
      
    /**
     * Provides information on the current executing command on the device
     */
    public long command_sequence;
      
    /**
     * Estimate of remaining operation time (0: no estimate, 0xFFFFFFFF: no battery)
     */
    public long estimated_run_time;
      
    /**
     * The interval between each STATE message
     */
    public int interval;
      
    /**
     * The delay between sensor integrations
     */
    public int offset;
      
    /**
     * The amount of time to integrate sensor data
     */
    public int duration;
      
    /**
     * Latitude (WGS84)
     */
    public int latitude;
      
    /**
     * Longitude (WGS84)
     */
    public int longitude;
      
    /**
     * Altitude above mean sea level (positive for up)
     */
    public int altitude_amsl;
      
    /**
     * Battery voltage (0: no information)
     */
    public int voltage_battery;
      
    /**
     * CPU [0], Board [1] temperature (Celsius)
     */
    public short system_temperature[] = new short[16];
      
    /**
     * Switch 1 current, in 10*milliamperes
     */
    public short switch1_current;
      
    /**
     * Switch 2 current, in 10*milliamperes
     */
    public short switch2_current;
      
    /**
     * Switch 3 current, in 10*milliamperes
     */
    public short switch3_current;
      
    /**
     * Switch 4 current, in 10*milliamperes
     */
    public short switch4_current;
      
    /**
     * Switch 1 voltage
     */
    public short switch1_voltage;
      
    /**
     * Switch 2 voltage
     */
    public short switch2_voltage;
      
    /**
     * Switch 3 voltage
     */
    public short switch3_voltage;
      
    /**
     * Switch 4 voltage
     */
    public short switch4_voltage;
      
    /**
     * Setpoint of flow controller 1, in SCCM (0: OFF)
     */
    public int flow1_setpoint;
      
    /**
     * Setpoint of flow controller 2, in SCCM (0: OFF)
     */
    public int flow2_setpoint;
      
    /**
     * Setpoint of flow controller 3, in SCCM (0: OFF)
     */
    public int flow3_setpoint;
      
    /**
     * Setpoint of flow controller 4, in SCCM (0: OFF)
     */
    public int flow4_setpoint;
      
    /**
     * Flow rate of flow controller 1, in SCCM
     */
    public int flow1_rate;
      
    /**
     * Flow rate of flow controller 2, in SCCM
     */
    public int flow2_rate;
      
    /**
     * Flow rate of flow controller 3, in SCCM
     */
    public int flow3_rate;
      
    /**
     * Flow rate of flow controller 4, in SCCM
     */
    public int flow4_rate;
      
    /**
     * Type of the MAV defined in MAV_TYPE ENUM, Added so this message can be used standalone in LB environments
     */
    public short system_type;
      
    /**
     * System id of the device to which we wish to subscribe. (0: none, 255: all)
     */
    public short subscription;
      
    /**
     * Hash of the currently loaded parameters (MD5 hash)
     */
    public short param_hash[] = new short[16];
      
    /**
     * The interface transmitting this message
     */
    public byte transmit_interface;
      
    /**
     * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
     */
    public byte los_rssi;
      
    /**
     * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
     */
    public byte cellular_rssi;
      
    /**
     * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
     */
    public byte satellite_rssi;
      
    /**
     * See the GPS_FIX_TYPE enum.
     */
    public short gps_fix_type;
      
    /**
     * Number of satellites visible. If unknown, set to 255
     */
    public short gps_satellites_visible;
      
    /**
     * Remaining battery energy, -1: not available
     */
    public byte battery_remaining;
      
    /**
     * Current operating mode of the system based on SWITCH_MODE enum
     */
    public short system_mode;
      
    /**
     * 1: in use, 0: not in use
     */
    public short switch1_present;
      
    /**
     * 1: in use, 0: not in use
     */
    public short switch2_present;
      
    /**
     * 1: in use, 0: not in use
     */
    public short switch3_present;
      
    /**
     * 1: in use, 0: not in use
     */
    public short switch4_present;
      
    /**
     * Status of switch 1, (1: ON, 0: OFF)
     */
    public short switch1_status;
      
    /**
     * Status of switch 2, (1: ON, 0: OFF)
     */
    public short switch2_status;
      
    /**
     * Status of switch 3, (1: ON, 0: OFF)
     */
    public short switch3_status;
      
    /**
     * Status of switch 4, (1: ON, 0: OFF)
     */
    public short switch4_status;
      
    /**
     * 1: in use, 0: not in use
     */
    public short flow1_present;
      
    /**
     * 1: in use, 0: not in use
     */
    public short flow2_present;
      
    /**
     * 1: in use, 0: not in use
     */
    public short flow3_present;
      
    /**
     * 1: in use, 0: not in use
     */
    public short flow4_present;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_MAVNET_STATE_SWITCHBOX;
        
        packet.payload.putLong(state_sequence);
        
        packet.payload.putUnsignedLong(time_usec);
        
        packet.payload.putUnsignedInt(command_sequence);
        
        packet.payload.putUnsignedInt(estimated_run_time);
        
        packet.payload.putInt(interval);
        
        packet.payload.putInt(offset);
        
        packet.payload.putInt(duration);
        
        packet.payload.putInt(latitude);
        
        packet.payload.putInt(longitude);
        
        packet.payload.putInt(altitude_amsl);
        
        packet.payload.putUnsignedShort(voltage_battery);
        
        
        for (int i = 0; i < system_temperature.length; i++) {
            packet.payload.putShort(system_temperature[i]);
        }
                    
        
        packet.payload.putShort(switch1_current);
        
        packet.payload.putShort(switch2_current);
        
        packet.payload.putShort(switch3_current);
        
        packet.payload.putShort(switch4_current);
        
        packet.payload.putShort(switch1_voltage);
        
        packet.payload.putShort(switch2_voltage);
        
        packet.payload.putShort(switch3_voltage);
        
        packet.payload.putShort(switch4_voltage);
        
        packet.payload.putUnsignedShort(flow1_setpoint);
        
        packet.payload.putUnsignedShort(flow2_setpoint);
        
        packet.payload.putUnsignedShort(flow3_setpoint);
        
        packet.payload.putUnsignedShort(flow4_setpoint);
        
        packet.payload.putUnsignedShort(flow1_rate);
        
        packet.payload.putUnsignedShort(flow2_rate);
        
        packet.payload.putUnsignedShort(flow3_rate);
        
        packet.payload.putUnsignedShort(flow4_rate);
        
        packet.payload.putUnsignedByte(system_type);
        
        packet.payload.putUnsignedByte(subscription);
        
        
        for (int i = 0; i < param_hash.length; i++) {
            packet.payload.putUnsignedByte(param_hash[i]);
        }
                    
        
        packet.payload.putByte(transmit_interface);
        
        packet.payload.putByte(los_rssi);
        
        packet.payload.putByte(cellular_rssi);
        
        packet.payload.putByte(satellite_rssi);
        
        packet.payload.putUnsignedByte(gps_fix_type);
        
        packet.payload.putUnsignedByte(gps_satellites_visible);
        
        packet.payload.putByte(battery_remaining);
        
        packet.payload.putUnsignedByte(system_mode);
        
        packet.payload.putUnsignedByte(switch1_present);
        
        packet.payload.putUnsignedByte(switch2_present);
        
        packet.payload.putUnsignedByte(switch3_present);
        
        packet.payload.putUnsignedByte(switch4_present);
        
        packet.payload.putUnsignedByte(switch1_status);
        
        packet.payload.putUnsignedByte(switch2_status);
        
        packet.payload.putUnsignedByte(switch3_status);
        
        packet.payload.putUnsignedByte(switch4_status);
        
        packet.payload.putUnsignedByte(flow1_present);
        
        packet.payload.putUnsignedByte(flow2_present);
        
        packet.payload.putUnsignedByte(flow3_present);
        
        packet.payload.putUnsignedByte(flow4_present);
        
        if(isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a mavnet_state_switchbox message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.state_sequence = payload.getLong();
        
        this.time_usec = payload.getUnsignedLong();
        
        this.command_sequence = payload.getUnsignedInt();
        
        this.estimated_run_time = payload.getUnsignedInt();
        
        this.interval = payload.getInt();
        
        this.offset = payload.getInt();
        
        this.duration = payload.getInt();
        
        this.latitude = payload.getInt();
        
        this.longitude = payload.getInt();
        
        this.altitude_amsl = payload.getInt();
        
        this.voltage_battery = payload.getUnsignedShort();
        
         
        for (int i = 0; i < this.system_temperature.length; i++) {
            this.system_temperature[i] = payload.getShort();
        }
                
        
        this.switch1_current = payload.getShort();
        
        this.switch2_current = payload.getShort();
        
        this.switch3_current = payload.getShort();
        
        this.switch4_current = payload.getShort();
        
        this.switch1_voltage = payload.getShort();
        
        this.switch2_voltage = payload.getShort();
        
        this.switch3_voltage = payload.getShort();
        
        this.switch4_voltage = payload.getShort();
        
        this.flow1_setpoint = payload.getUnsignedShort();
        
        this.flow2_setpoint = payload.getUnsignedShort();
        
        this.flow3_setpoint = payload.getUnsignedShort();
        
        this.flow4_setpoint = payload.getUnsignedShort();
        
        this.flow1_rate = payload.getUnsignedShort();
        
        this.flow2_rate = payload.getUnsignedShort();
        
        this.flow3_rate = payload.getUnsignedShort();
        
        this.flow4_rate = payload.getUnsignedShort();
        
        this.system_type = payload.getUnsignedByte();
        
        this.subscription = payload.getUnsignedByte();
        
         
        for (int i = 0; i < this.param_hash.length; i++) {
            this.param_hash[i] = payload.getUnsignedByte();
        }
                
        
        this.transmit_interface = payload.getByte();
        
        this.los_rssi = payload.getByte();
        
        this.cellular_rssi = payload.getByte();
        
        this.satellite_rssi = payload.getByte();
        
        this.gps_fix_type = payload.getUnsignedByte();
        
        this.gps_satellites_visible = payload.getUnsignedByte();
        
        this.battery_remaining = payload.getByte();
        
        this.system_mode = payload.getUnsignedByte();
        
        this.switch1_present = payload.getUnsignedByte();
        
        this.switch2_present = payload.getUnsignedByte();
        
        this.switch3_present = payload.getUnsignedByte();
        
        this.switch4_present = payload.getUnsignedByte();
        
        this.switch1_status = payload.getUnsignedByte();
        
        this.switch2_status = payload.getUnsignedByte();
        
        this.switch3_status = payload.getUnsignedByte();
        
        this.switch4_status = payload.getUnsignedByte();
        
        this.flow1_present = payload.getUnsignedByte();
        
        this.flow2_present = payload.getUnsignedByte();
        
        this.flow3_present = payload.getUnsignedByte();
        
        this.flow4_present = payload.getUnsignedByte();
        
        if(isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_mavnet_state_switchbox() {
        msgid = MAVLINK_MSG_ID_MAVNET_STATE_SWITCHBOX;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_mavnet_state_switchbox(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_MAVNET_STATE_SWITCHBOX;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);        
    }

                                                                                                          
    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_MAVNET_STATE_SWITCHBOX - sysid:"+sysid+" compid:"+compid+" state_sequence:"+state_sequence+" time_usec:"+time_usec+" command_sequence:"+command_sequence+" estimated_run_time:"+estimated_run_time+" interval:"+interval+" offset:"+offset+" duration:"+duration+" latitude:"+latitude+" longitude:"+longitude+" altitude_amsl:"+altitude_amsl+" voltage_battery:"+voltage_battery+" system_temperature:"+system_temperature+" switch1_current:"+switch1_current+" switch2_current:"+switch2_current+" switch3_current:"+switch3_current+" switch4_current:"+switch4_current+" switch1_voltage:"+switch1_voltage+" switch2_voltage:"+switch2_voltage+" switch3_voltage:"+switch3_voltage+" switch4_voltage:"+switch4_voltage+" flow1_setpoint:"+flow1_setpoint+" flow2_setpoint:"+flow2_setpoint+" flow3_setpoint:"+flow3_setpoint+" flow4_setpoint:"+flow4_setpoint+" flow1_rate:"+flow1_rate+" flow2_rate:"+flow2_rate+" flow3_rate:"+flow3_rate+" flow4_rate:"+flow4_rate+" system_type:"+system_type+" subscription:"+subscription+" param_hash:"+param_hash+" transmit_interface:"+transmit_interface+" los_rssi:"+los_rssi+" cellular_rssi:"+cellular_rssi+" satellite_rssi:"+satellite_rssi+" gps_fix_type:"+gps_fix_type+" gps_satellites_visible:"+gps_satellites_visible+" battery_remaining:"+battery_remaining+" system_mode:"+system_mode+" switch1_present:"+switch1_present+" switch2_present:"+switch2_present+" switch3_present:"+switch3_present+" switch4_present:"+switch4_present+" switch1_status:"+switch1_status+" switch2_status:"+switch2_status+" switch3_status:"+switch3_status+" switch4_status:"+switch4_status+" flow1_present:"+flow1_present+" flow2_present:"+flow2_present+" flow3_present:"+flow3_present+" flow4_present:"+flow4_present+"";
    }
}
        