/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE MAVNET_STATE_RELAY PACKING
package com.mavlink.mavnet;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;
        
/**
 * Data from a communications relay device.
 */
public class msg_mavnet_state_relay extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_MAVNET_STATE_RELAY = 43012;
    public static final int MAVLINK_MSG_LENGTH = 85;
    private static final long serialVersionUID = MAVLINK_MSG_ID_MAVNET_STATE_RELAY;


      
    /**
     * Incrementing sequence number, device is expected to increment with each msg and not repeat even with reboot
     */
    public long state_sequence;
      
    /**
     * Timestamp (UNIX epoch based on GPS)
     */
    public long time_usec;
      
    /**
     * Provides information on the current executing command on the device
     */
    public long command_sequence;
      
    /**
     * Latitude (WGS84)
     */
    public int target_latitude;
      
    /**
     * Longitude (WGS84)
     */
    public int target_longitude;
      
    /**
     * Altitude above mean sea level (positive for up)
     */
    public int target_altitude_amsl;
      
    /**
     * Estimate of remaining operation time (0: no estimate, 0xFFFFFFFF: no battery)
     */
    public long estimated_run_time;
      
    /**
     * The interval between each STATE message
     */
    public int interval;
      
    /**
     * The delay between sensor integrations
     */
    public int offset;
      
    /**
     * The amount of time to integrate sensor data
     */
    public int duration;
      
    /**
     * Latitude (WGS84)
     */
    public int latitude;
      
    /**
     * Longitude (WGS84)
     */
    public int longitude;
      
    /**
     * Altitude above mean sea level (positive for up)
     */
    public int altitude_amsl;
      
    /**
     * Battery voltage (0: no information)
     */
    public int voltage_battery;
      
    /**
     * Type of the system defined in MAV_TYPE ENUM
     */
    public short system_type;
      
    /**
     * System id of the device to which we wish to subscribe. (0: none, 255: all)
     */
    public short subscription;
      
    /**
     * Hash of the currently loaded parameters (MD5 hash)
     */
    public short param_hash[] = new short[16];
      
    /**
     * The interface transmitting this message
     */
    public byte transmit_interface;
      
    /**
     * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
     */
    public byte los_rssi;
      
    /**
     * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
     */
    public byte cellular_rssi;
      
    /**
     * LOS availability and signal strength. (-2: Faulted, -1: Disabled, 0-100: signal strength)
     */
    public byte satellite_rssi;
      
    /**
     * Remaining battery energy, -1: not available
     */
    public byte battery_remaining;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_MAVNET_STATE_RELAY;
        
        packet.payload.putLong(state_sequence);
        
        packet.payload.putUnsignedLong(time_usec);
        
        packet.payload.putUnsignedInt(command_sequence);
        
        packet.payload.putInt(target_latitude);
        
        packet.payload.putInt(target_longitude);
        
        packet.payload.putInt(target_altitude_amsl);
        
        packet.payload.putUnsignedInt(estimated_run_time);
        
        packet.payload.putInt(interval);
        
        packet.payload.putInt(offset);
        
        packet.payload.putInt(duration);
        
        packet.payload.putInt(latitude);
        
        packet.payload.putInt(longitude);
        
        packet.payload.putInt(altitude_amsl);
        
        packet.payload.putUnsignedShort(voltage_battery);
        
        packet.payload.putUnsignedByte(system_type);
        
        packet.payload.putUnsignedByte(subscription);
        
        
        for (int i = 0; i < param_hash.length; i++) {
            packet.payload.putUnsignedByte(param_hash[i]);
        }
                    
        
        packet.payload.putByte(transmit_interface);
        
        packet.payload.putByte(los_rssi);
        
        packet.payload.putByte(cellular_rssi);
        
        packet.payload.putByte(satellite_rssi);
        
        packet.payload.putByte(battery_remaining);
        
        if(isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a mavnet_state_relay message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.state_sequence = payload.getLong();
        
        this.time_usec = payload.getUnsignedLong();
        
        this.command_sequence = payload.getUnsignedInt();
        
        this.target_latitude = payload.getInt();
        
        this.target_longitude = payload.getInt();
        
        this.target_altitude_amsl = payload.getInt();
        
        this.estimated_run_time = payload.getUnsignedInt();
        
        this.interval = payload.getInt();
        
        this.offset = payload.getInt();
        
        this.duration = payload.getInt();
        
        this.latitude = payload.getInt();
        
        this.longitude = payload.getInt();
        
        this.altitude_amsl = payload.getInt();
        
        this.voltage_battery = payload.getUnsignedShort();
        
        this.system_type = payload.getUnsignedByte();
        
        this.subscription = payload.getUnsignedByte();
        
         
        for (int i = 0; i < this.param_hash.length; i++) {
            this.param_hash[i] = payload.getUnsignedByte();
        }
                
        
        this.transmit_interface = payload.getByte();
        
        this.los_rssi = payload.getByte();
        
        this.cellular_rssi = payload.getByte();
        
        this.satellite_rssi = payload.getByte();
        
        this.battery_remaining = payload.getByte();
        
        if(isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_mavnet_state_relay() {
        msgid = MAVLINK_MSG_ID_MAVNET_STATE_RELAY;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_mavnet_state_relay(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_MAVNET_STATE_RELAY;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);        
    }

                                                
    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_MAVNET_STATE_RELAY - sysid:"+sysid+" compid:"+compid+" state_sequence:"+state_sequence+" time_usec:"+time_usec+" command_sequence:"+command_sequence+" target_latitude:"+target_latitude+" target_longitude:"+target_longitude+" target_altitude_amsl:"+target_altitude_amsl+" estimated_run_time:"+estimated_run_time+" interval:"+interval+" offset:"+offset+" duration:"+duration+" latitude:"+latitude+" longitude:"+longitude+" altitude_amsl:"+altitude_amsl+" voltage_battery:"+voltage_battery+" system_type:"+system_type+" subscription:"+subscription+" param_hash:"+param_hash+" transmit_interface:"+transmit_interface+" los_rssi:"+los_rssi+" cellular_rssi:"+cellular_rssi+" satellite_rssi:"+satellite_rssi+" battery_remaining:"+battery_remaining+"";
    }
}
        