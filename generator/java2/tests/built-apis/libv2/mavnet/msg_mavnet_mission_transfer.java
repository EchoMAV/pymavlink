/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE MAVNET_MISSION_TRANSFER PACKING
package com.mavlink.mavnet;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;
        
/**
 * A message informing an MAVNet system to transfer a mission to or from a requestor.
 */
public class msg_mavnet_mission_transfer extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_MAVNET_MISSION_TRANSFER = 43007;
    public static final int MAVLINK_MSG_LENGTH = 40;
    private static final long serialVersionUID = MAVLINK_MSG_ID_MAVNET_MISSION_TRANSFER;


      
    /**
     * The command state sequence number against which this command should apply.
     */
    public long command_sequence;
      
    /**
     * The number of individual mission commands that are part of the mission.
     */
    public int mission_parts;
      
    /**
     * System which should transfer the mission.
     */
    public short target_system;
      
    /**
     * Direction of the mission transfer (0: Upload to MAVNet, 1: Download from MAVNet)
     */
    public short transfer_direction;
      
    /**
     * ID (MD5 hash) of the mission to be transfered.
     */
    public short mission_id[] = new short[16];
      
    /**
     * Ascii encoded name of the mission.
     */
    public byte mission_name[] = new byte[16];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_MAVNET_MISSION_TRANSFER;
        
        packet.payload.putUnsignedInt(command_sequence);
        
        packet.payload.putUnsignedShort(mission_parts);
        
        packet.payload.putUnsignedByte(target_system);
        
        packet.payload.putUnsignedByte(transfer_direction);
        
        
        for (int i = 0; i < mission_id.length; i++) {
            packet.payload.putUnsignedByte(mission_id[i]);
        }
                    
        
        
        for (int i = 0; i < mission_name.length; i++) {
            packet.payload.putByte(mission_name[i]);
        }
                    
        
        if(isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a mavnet_mission_transfer message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.command_sequence = payload.getUnsignedInt();
        
        this.mission_parts = payload.getUnsignedShort();
        
        this.target_system = payload.getUnsignedByte();
        
        this.transfer_direction = payload.getUnsignedByte();
        
         
        for (int i = 0; i < this.mission_id.length; i++) {
            this.mission_id[i] = payload.getUnsignedByte();
        }
                
        
         
        for (int i = 0; i < this.mission_name.length; i++) {
            this.mission_name[i] = payload.getByte();
        }
                
        
        if(isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_mavnet_mission_transfer() {
        msgid = MAVLINK_MSG_ID_MAVNET_MISSION_TRANSFER;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_mavnet_mission_transfer(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_MAVNET_MISSION_TRANSFER;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);        
    }

               
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setMission_Name(String str) {
        int len = Math.min(str.length(), 16);
        for (int i=0; i<len; i++) {
            mission_name[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<16; i++) {            // padding for the rest of the buffer
            mission_name[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getMission_Name() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 16; i++) {
            if (mission_name[i] != 0)
                buf.append((char) mission_name[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_MAVNET_MISSION_TRANSFER - sysid:"+sysid+" compid:"+compid+" command_sequence:"+command_sequence+" mission_parts:"+mission_parts+" target_system:"+target_system+" transfer_direction:"+transfer_direction+" mission_id:"+mission_id+" mission_name:"+mission_name+"";
    }
}
        