/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

package com.mavlink.ardupilotmega;

import java.util.HashMap;
import java.util.Map;

/**
 * X.25 CRC calculation for MAVlink messages. The checksum must be initialized,
 * updated with witch field of the message, and then finished with the message
 * id.
 */
public class CRC {
    private static final Map<Integer, Integer> MAVLINK_MESSAGE_CRCS;
    private static final int CRC_INIT_VALUE = 0xffff;
    private int crcValue;

    static {
        MAVLINK_MESSAGE_CRCS = new HashMap<>();
        MAVLINK_MESSAGE_CRCS.put(150, 134);
        MAVLINK_MESSAGE_CRCS.put(151, 219);
        MAVLINK_MESSAGE_CRCS.put(152, 208);
        MAVLINK_MESSAGE_CRCS.put(153, 188);
        MAVLINK_MESSAGE_CRCS.put(154, 84);
        MAVLINK_MESSAGE_CRCS.put(155, 22);
        MAVLINK_MESSAGE_CRCS.put(156, 19);
        MAVLINK_MESSAGE_CRCS.put(157, 21);
        MAVLINK_MESSAGE_CRCS.put(158, 134);
        MAVLINK_MESSAGE_CRCS.put(160, 78);
        MAVLINK_MESSAGE_CRCS.put(161, 68);
        MAVLINK_MESSAGE_CRCS.put(163, 127);
        MAVLINK_MESSAGE_CRCS.put(164, 154);
        MAVLINK_MESSAGE_CRCS.put(165, 21);
        MAVLINK_MESSAGE_CRCS.put(166, 21);
        MAVLINK_MESSAGE_CRCS.put(167, 144);
        MAVLINK_MESSAGE_CRCS.put(168, 1);
        MAVLINK_MESSAGE_CRCS.put(169, 234);
        MAVLINK_MESSAGE_CRCS.put(170, 73);
        MAVLINK_MESSAGE_CRCS.put(171, 181);
        MAVLINK_MESSAGE_CRCS.put(172, 22);
        MAVLINK_MESSAGE_CRCS.put(173, 83);
        MAVLINK_MESSAGE_CRCS.put(174, 167);
        MAVLINK_MESSAGE_CRCS.put(175, 138);
        MAVLINK_MESSAGE_CRCS.put(176, 234);
        MAVLINK_MESSAGE_CRCS.put(177, 240);
        MAVLINK_MESSAGE_CRCS.put(178, 47);
        MAVLINK_MESSAGE_CRCS.put(179, 189);
        MAVLINK_MESSAGE_CRCS.put(180, 52);
        MAVLINK_MESSAGE_CRCS.put(181, 174);
        MAVLINK_MESSAGE_CRCS.put(182, 229);
        MAVLINK_MESSAGE_CRCS.put(183, 85);
        MAVLINK_MESSAGE_CRCS.put(184, 159);
        MAVLINK_MESSAGE_CRCS.put(185, 186);
        MAVLINK_MESSAGE_CRCS.put(186, 72);
        MAVLINK_MESSAGE_CRCS.put(191, 92);
        MAVLINK_MESSAGE_CRCS.put(192, 36);
        MAVLINK_MESSAGE_CRCS.put(193, 71);
        MAVLINK_MESSAGE_CRCS.put(194, 98);
        MAVLINK_MESSAGE_CRCS.put(195, 120);
        MAVLINK_MESSAGE_CRCS.put(200, 134);
        MAVLINK_MESSAGE_CRCS.put(201, 205);
        MAVLINK_MESSAGE_CRCS.put(214, 69);
        MAVLINK_MESSAGE_CRCS.put(215, 101);
        MAVLINK_MESSAGE_CRCS.put(216, 50);
        MAVLINK_MESSAGE_CRCS.put(217, 202);
        MAVLINK_MESSAGE_CRCS.put(218, 17);
        MAVLINK_MESSAGE_CRCS.put(219, 162);
        MAVLINK_MESSAGE_CRCS.put(225, 142);
        MAVLINK_MESSAGE_CRCS.put(226, 207);
        MAVLINK_MESSAGE_CRCS.put(10001, 209);
        MAVLINK_MESSAGE_CRCS.put(10002, 186);
        MAVLINK_MESSAGE_CRCS.put(10003, 4);
        MAVLINK_MESSAGE_CRCS.put(11000, 134);
        MAVLINK_MESSAGE_CRCS.put(11001, 15);
        MAVLINK_MESSAGE_CRCS.put(11002, 234);
        MAVLINK_MESSAGE_CRCS.put(11003, 64);
        MAVLINK_MESSAGE_CRCS.put(11010, 46);
        MAVLINK_MESSAGE_CRCS.put(11011, 106);
        MAVLINK_MESSAGE_CRCS.put(11020, 205);
        MAVLINK_MESSAGE_CRCS.put(11030, 144);
        MAVLINK_MESSAGE_CRCS.put(11031, 133);
        MAVLINK_MESSAGE_CRCS.put(11032, 85);
        MAVLINK_MESSAGE_CRCS.put(42000, 227);
        MAVLINK_MESSAGE_CRCS.put(42001, 239);
        
    }

    /**
     * Accumulate the X.25 CRC by adding one char at a time.
     *
     * The checksum function adds the hash of one char at a time to the 16 bit
     * checksum (uint16_t).
     *
     * @param data new char to hash
     **/
    public void update_checksum(int data) {
        data = data & 0xff; //cast because we want an unsigned type
        int tmp = data ^ (crcValue & 0xff);
        tmp ^= (tmp << 4) & 0xff;
        crcValue = ((crcValue >> 8) & 0xff) ^ (tmp << 8) ^ (tmp << 3) ^ ((tmp >> 4) & 0xf);
    }

    /**
     * Finish the CRC calculation of a message, by running the CRC with the
     * Magic Byte.
     *
     * @param msgid The message id number
     */
    public void finish_checksum(int msgid) {
        if(MAVLINK_MESSAGE_CRCS.containsKey(msgid))
            update_checksum(MAVLINK_MESSAGE_CRCS.get(msgid));
    }

    /**
     * Initialize the buffer for the X.25 CRC
     */
    public void start_checksum() {
        crcValue = CRC_INIT_VALUE;
    }

    public int getMSB() {
        return ((crcValue >> 8) & 0xff);
    }

    public int getLSB() {
        return (crcValue & 0xff);
    }

    public CRC() {
        start_checksum();
    }

}
        